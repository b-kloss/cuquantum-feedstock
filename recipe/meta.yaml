{% set package="cuquantum" %}
{% set sdk_version_string = "24.11.0.21" %}
{% set sdk_version = sdk_version_string.split(".") %}
{% set sdk_year  = sdk_version[0] | int %}
{% set sdk_month = sdk_version[1] | int %}
{% set sdk_patch = sdk_version[2] | int %}
{% set sdk_build = sdk_version[3] | int %}

{% set cuda_compiler_version = cuda_compiler_version | default("None") %}

{% if "." in (cuda_compiler_version | string) %}
  {% set cuda_version = cuda_compiler_version.split(".") %}
  {% set cuda_major = cuda_version[0] | int %}
  {% set cuda_minor = cuda_version[1] | int %}
{% else %}
  {% set cuda_major = cuda_compiler_version | int %}
  {% set cuda_minor = 0 %}
{% endif %}

{% if mpi != "nompi" %}
  {% set mpi_prefix = "mpi_" + mpi %}
  {% set mpi_suffix = sdk_build + 100 %}
{% else %}
  {% set mpi_prefix = "nompi_" %}
  {% set mpi_suffix = sdk_build %}
{% endif %}

{% if linux64 or aarch64 %}
  {% set kname = "linux" %}
  {% set march = "sbsa" %}    # [aarch64]
  {% set march = "x86_64" %}  # [linux64]

  {% set target_path = os.sep.join(["", "targets", "%s-%s" % (march, kname)]) %}
  {% set devzone_base = "https://developer.download.nvidia.com/compute" %}
  {% set devzone = "%s/%s/redist/%s/%s-%s" % (devzone_base, package, package, kname, march) %}
  
  {% set devzone = "%s/%s-%s-%s-%s_cuda%s-archive.tar.xz" % (devzone, package, kname, march, sdk_version_string, cuda_major) %}

  {% set github_base = "https://github.com/nvidia" %}
  {% set github = "%s/%s" % (github_base, package) %}
  {% set github = "%s/archive/refs/tags/v%s.tar.gz" % (github, ".".join(sdk_version[:3])) %}
{% endif %}

package:
  name: cuquantum-sdk
  version: {{ ".".join(sdk_version[:3]) }}

build:
  number: {{ sdk_build }}
  skip: true  # [not cuda_compiler_version in ("11.8", "12.0", "12.6")]
  skip: true  # [py<310]
  skip: true  # [win]
  skip: true  # [osx]

requirements:
  build:
    - {{ compiler("c") }}
    - {{ compiler("cxx") }}
    - {{ compiler("cuda") }}

source:
  - url: {{ devzone }}  # [cuda_compiler_version in ("11.8", "12.0", "12.6") and (linux64 or aarch64)]
    sha256: a36123e52daeae5e6e5c543b12d45fb41411280ceb924bbde54d4d1051cf10ef  # [cuda_compiler_version == "11.8" and linux64]
    sha256: 4640da62e66f17671c8d89be93a439b8a7a13169f7aa902a3e9b6cf676d4bffd  # [cuda_compiler_version in ("12.0", "12.6") and linux64]
    sha256: 16c1aba50c657456928386a8597d4b766daa3c6f69da738a9568ad4ac97094ae  # [cuda_compiler_version == "11.8" and aarch64]
    sha256: e3e4a289887d17d4b78eaac97f2fa03b2de9d832f918eb48ab97de997c104ce6  # [cuda_compiler_version in ("12.0", "12.6") and aarch64]

  - url: {{ github }}  # [linux64 or aarch64]
    sha256: a4b0965e7193515930542cc558d922e24c1732d8240efde3e622e84d6c4416fe  # [linux64 or aarch64]

outputs:
  - name: cuquantum
    version: {{ ".".join(sdk_version[:3]) }}
    build:
      number: {{ sdk_build }}
    requirements:
      build:
      host:
      run:
        - {{ pin_subpackage("cudensitymat", max_pin="x.x.x") }}
        - {{ pin_subpackage("cutensornet", max_pin="x.x.x") }}
        - {{ pin_subpackage("custatevec", max_pin="x.x.x") }}
    test:
      commands:
        - echo "cuquantum metapackage {{ sdk_version_string }}"
  - name: cudensitymat
    version: 0.0.5
    build:
      number: {{ sdk_build }}
      string: "{{ mpi_prefix }}_h{{ PKG_HASH }}_{{ mpi_suffix }}"
      script:
        - "${RECIPE_DIR}/cudensitymat/cudm-install"
      run_exports:
        - {{ pin_subpackage("cudensitymat", max_pin="x") }} {{ mpi_prefix }}_*
      ignore_run_exports:
        - {{ compiler("cuda") }}
      post-link: post-link
    requirements:
      build:
        - {{ compiler("c") }}
        - {{ compiler("cxx") }}
        - {{ compiler("cuda") }}
      host:
        - cutensor >=2.0.2,<3
        - cuda-version {{ cuda_compiler_version }}  # [cuda_compiler_version in ("11.8", "12.0", "12.6")]
        - libcublas  # [cuda_compiler_version in ("12.0", "12.6")]
        - {{ mpi }}  # [mpi != "nompi"]
      run:
        - {{ pin_compatible("cutensor", max_pin="x") }}
        - cuda-version >={{ cuda_major }}.0,<{{ cuda_major + 1 }}  # [cuda_compiler_version in ("11.8", "12.0", "12.6")]
        - {{ pin_compatible("libcublas", max_pin="x", min_pin="x") }}  # [cuda_compiler_version in ("12.0", "12.6")]
        - {{ mpi }} * external*  # [mpi == "mpich"]
        - {{ mpi }}  # [mpi == "openmpi"]
      run_constrained:
        - openmpi <0.a0  # [mpi == "nompi"]
        - mpich   <0.a0  # [mpi == "nompi"]
    test:
      requires:
        - git
        - {{ compiler("c") }}
        - {{ compiler("cxx") }}
        - {{ compiler("cuda") }}
        - cuda-version {{ cuda_compiler_version }}.*
      files:
        - ./common/*
        - ./cudensitymat/*
      commands:
        - ./common/detect-glibc
        - ./common/validate-glibc
        - ./cudensitymat/cudm-tests {{ sdk_version_string }}
    about:
      home:
      license:
      license_url:
      license_file:
      summary:
      description:
      doc_url:
      dev_url:
  - name: cutensornet
    version: 2.6.0
    build:
      number: {{ sdk_build }}
      string: "{{ mpi_prefix }}_h{{ PKG_HASH }}_{{ mpi_suffix }}"
      script:
        - "${RECIPE_DIR}/cutensornet/cutn-install"
      run_exports:
        - {{ pin_subpackage("cutensornet", max_pin="x") }} {{ mpi_prefix }}_*
      ignore_run_exports:
        - {{ compiler("cuda") }}
      post-link: post-link
    requirements:
      build:
        - {{ compiler("c") }}
        - {{ compiler("cxx") }}
        - {{ compiler("cuda") }}
      host:
        - cutensor >=2.0.2,<3
        - cuda-version {{ cuda_compiler_version }}  # [cuda_compiler_version in ("11.8", "12.0", "12.6")]
        - libcusolver  # [cuda_compiler_version in ("12.0", "12.6")]
        - libcublas    # [cuda_compiler_version in ("12.0", "12.6")]
        - {{ mpi }}  # [mpi != "nompi"]
      run:
        - {{ pin_compatible("cutensor", max_pin="x") }}
        - cuda-version >={{ cuda_major }}.0,<{{ cuda_major + 1 }}        # [cuda_compiler_version in ("11.8", "12.0", "12.6")]
        - {{ pin_compatible("libcublas", max_pin="x", min_pin="x") }}    # [cuda_compiler_version in ("12.0", "12.6")]
        - {{ pin_compatible("libcusolver", max_pin="x", min_pin="x") }}  # [cuda_compiler_version in ("12.0", "12.6")]
        - {{ mpi }} * external*  # [mpi == "mpich"]
        - {{ mpi }}              # [mpi == "openmpi"]
      run_constrained:
        - openmpi <0.a0  # [mpi == "nompi"]
        - mpich   <0.a0  # [mpi == "nompi"]
    test:
      requires:
        - git
        - {{ compiler("c") }}
        - {{ compiler("cxx") }}
        - {{ compiler("cuda") }}
        - cuda-version {{ cuda_compiler_version }}.*
      files:
        - ./common/*
        - ./cutensornet/*
      commands:
        - ./common/detect-glibc
        - ./common/validate-glibc
        - ./cutensornet/cutn-tests {{ sdk_version_string }}
    about:
      home:
      license:
      license_url:
      license_file:
      summary:
      description:
      doc_url:
      dev_url:
  - name: custatevec
    version: 1.7.0
    build:
      number: {{ sdk_build }}
      string: "{{ mpi_prefix }}_h{{ PKG_HASH }}_{{ mpi_suffix }}"
      script:
        - "${RECIPE_DIR}/custatevec/cusv-install"
      run_exports:
        - {{ pin_subpackage("custatevec", max_pin="x") }} {{ mpi_prefix }}_*
      ignore_run_exports:
        - {{ compiler("cuda") }}
      post-link: post-link
    requirements:
      build:
        - {{ compiler("c") }}
        - {{ compiler("cxx") }}
        - {{ compiler("cuda") }}
      host:
        - cuda-version {{ cuda_compiler_version }}  # [cuda_compiler_version in ("11.8", "12.0", "12.6")]
        - libcublas                                 # [cuda_compiler_version in ("12.0", "12.6")]
      run:
        - cuda-version >={{ cuda_major }}.0,<{{ cuda_major + 1 }}      # [cuda_compiler_version in ("11.8", "12.0", "12.6")]
        - {{ pin_compatible("libcublas", max_pin="x", min_pin="x") }}  # [cuda_compiler_version in ("12.0", "12.6")]
        - cudatoolkit  # [cuda_compiler_version == "11.8"]
      run_constrained:
        - openmpi <0.a0  # [mpi == "nompi"]
        - mpich   <0.a0  # [mpi == "nompi"]
    test:
      requires:
        - git
        - {{ compiler("c") }}
        - {{ compiler("cxx") }}
        - {{ compiler("cuda") }}
        - cuda-version {{ cuda_compiler_version }}.*
      files:
        - ./common/*
        - ./custatevec/*
      commands:
        - ./common/detect-glibc
        - ./common/validate-glibc
        - ./custatevec/cusv-tests {{ sdk_version_string }}
    about:
      home:
      license:
      license_url:
      license_file:
      summary:
      description:
      doc_url:
      dev_url:
  - name: cuquantum-python
    version: {{ ".".join(sdk_version[:3]) }}
    build:
      number: {{ sdk_build }}
      script:
        - "${RECIPE_DIR}/cuquantum-python/cuquantum-python-install"
      ignore_run_exports_from:
        - {{ compiler('cuda') }}
    requirements:
      build:
        - {{ stdlib('c') }}
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('cuda') }}
        - cross-python_{{ target_platform }}  # [build_platform != target_platform]
        - python >=3.10                       # [build_platform != target_platform]
        - cython <3                           # [build_platform != target_platform]
      host:
        - python >=3.10
        - pip
        - cython <3
        - custatevec  =1.7.0
        - cutensornet =2.6.0
        - cudensitymat =0.0.5
        - packaging
      run:
        - python >=3.10
        - numpy  >=1.21,<2
        - cupy   >=13.0
        - {{ pin_subpackage('custatevec', max_pin='x') }}
        - {{ pin_subpackage('cutensornet', max_pin='x') }}
        - {{ pin_subpackage('cudensitymat', max_pin='x') }}
        - cuda-version >={{ cuda_major }}.0,<{{ cuda_major + 1 }}
      run_constrained:
        - pytorch >=1.10
        - mpi4py >=3.1.0
    test:
      requires:
        - cuda-driver-dev  # [linux and cuda_compiler_version in ("12.0", "12.6")]
      files:
        - ./common/*
        - ./cuquantum-python/*
      commands:
        - ./cuquantum-python/cuquantum-python-tests
    about:
      home:
      license:
      license_url:
      license_file:
      summary:
      description:
      doc_url:
      dev_url:

about:
  home: https://developer.nvidia.com/cuquantum-sdk
  license: LicenseRef-cuQuantum-Software-License-Agreement
  license_url: https://docs.nvidia.com/cuda/cuquantum/latest/license.html
  license_file: LICENSE
  summary: "cuQuantum SDK: A High-Performance Library for Accelerating Quantum Information Science"
  description: |
    NVIDIA cuQuantum is an SDK of optimized libraries and tools for accelerating quantum computing workflows.
    Using NVIDIA GPU Tensor Core GPUs, developers can use cuQuantum to speed up quantum circuit simulations
    based on state vector and tensor network methods by orders of magnitude. Two major components of the
    SDK are

      - cuDensityMat: a high-performance library for density matrix computations
      - cuStateVec: a high-performance library for state vector computations
      - cuTensorNet: a high-performance library for tensor network computations

    The packages cuquantum, custatevec, and cutensornet are governed by the NVIDIA cuQuantum
    Software License Agreement (EULA). By downloading and using the packages,
    you accept the terms and conditions of the NVIDIA cuQuantum EULA -
    https://docs.nvidia.com/cuda/cuquantum/license.html
  doc_url: https://docs.nvidia.com/cuda/cuquantum/latest/index.html
  dev_url: https://github.com/NVIDIA/cuQuantum

extra:
  recipe-maintainers:
    - b-kloss
    - leofang
    - JeremyWangNVDA
    - mtjrider
    - yangcal
    - DmitryLyakh
