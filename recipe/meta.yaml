{% set version = "22.07.1.14" %}

package:
  name: cuquantum
  version: {{ version }}

source:
  url: https://developer.download.nvidia.com/compute/cuquantum/redist/cuquantum/linux-x86_64/cuquantum-linux-x86_64-{{ version }}-archive.tar.xz  # [linux64]
  url: https://developer.download.nvidia.com/compute/cuquantum/redist/cuquantum/linux-sbsa/cuquantum-linux-sbsa-{{ version }}-archive.tar.xz  # [aarch64]
  url: https://developer.download.nvidia.com/compute/cuquantum/redist/cuquantum/linux-ppc64le/cuquantum-linux-ppc64le-{{ version }}-archive.tar.xz  # [ppc64le]

  sha256: 4c4931096498451593ad553b6cb7a107bb6d6cedea65c80d5376d0cfbb647f8e  # [linux64]
  sha256: 0c8fb14bf8916170e15a2ae7cfa950e23af13c9cb0915bad88d754221ad60116  # [aarch64]
  sha256: 2d35dba3c739e8de51591bcd2d7edf1a3c9995850af6525ae08e9b5c3798cf9a  # [ppc64le]

build:
  number: 1
  skip: true  # [win or cuda_compiler_version != "11.2"]

# remember, if no output has the same name as the top-level package, conda-build
# synthesizes a meta package for us, so the requirements below are for "cuquantum".
requirements:
  build:
  host:
  run:
    - {{ pin_subpackage('custatevec', exact=True) }}
    - {{ pin_subpackage('cutensornet', exact=True) }}

outputs:

  - name: custatevec
    version: 1.1.0
    build:
      number: 0
      script:
        - mkdir -p $PREFIX/include                                            # [linux]
        - mv include/custatevec.h $PREFIX/include/                            # [linux]
        - mkdir -p $PREFIX/lib                                                # [linux]
        - mv lib/libcustatevec.so* $PREFIX/lib/                               # [linux]

        # Patch for conda-forge:
        # According to the CUDA support matrix, we require glibc 2.27+ on aarch64-sbsa
        # and ppc64le, while conda-forge is still on 2.17. However, given that powf is
        # the only offending symbol that needs a newer glibc, it is the easiest if we
        # just patch it.
        - patchelf --clear-symbol-version powf $PREFIX/lib/libcustatevec.so   # [aarch64 or ppc64le]
      run_exports:
        - {{ pin_subpackage('custatevec', max_pin='x') }}
      ignore_run_exports_from:
        - {{ compiler('cuda') }}
      missing_dso_whitelist:
        - '*/libcublas.so*'
        - '*/libcublasLt.so*'
      post-link: post-link  # this is supported by conda-build, but undocumented
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cuda') }}
        - sysroot_linux-64 2.17  # [linux64]
      host:
      run:
        - cudatoolkit >=11.0,<12

  - name: cutensornet
    version: 1.1.1
    build:
      number: 0
      script:
        - mkdir -p $PREFIX/include                                            # [linux]
        - mv include/cutensornet* $PREFIX/include/                            # [linux]
        - mkdir -p $PREFIX/lib                                                # [linux]
        - mv lib/libcutensornet.so* $PREFIX/lib/                              # [linux]
      run_exports:
        - {{ pin_subpackage('cutensornet', max_pin='x') }}
      ignore_run_exports_from:
        - {{ compiler('cuda') }}
      missing_dso_whitelist:
        - '*/libcutensor.so*'
        - '*/libcublas.so*'
        - '*/libcublasLt.so*'
      post-link: post-link  # this is supported by conda-build, but undocumented
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cuda') }}
        - sysroot_linux-64 2.17  # [linux64]
      host:
      run:
        - libgomp        # [linux]
        - cudatoolkit >=11.0,<12
        - cutensor >=1.5,<2

test:
  requires:
    - git
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('cuda') }}
    - sysroot_linux-64 2.17  # [linux64]
    # make sure we pick up the version matching the docker,
    # or the linker would complain 
    - cudatoolkit {{ cuda_compiler_version }}
  files:
    - test_load_elf.c        # [linux]

about:
  home: https://developer.nvidia.com/cuquantum-sdk
  license: LicenseRef-cuQuantum-Software-License-Agreement
  license_url: https://docs.nvidia.com/cuda/cuquantum/license.html
  license_file: docs/cuQuantum_license.pdf
  summary: 'cuQuantum SDK: A High-Performance Library for Accelerating Quantum Information Science'
  description: |
    NVIDIA cuQuantum is an SDK of optimized libraries and tools for accelerating quantum computing workflows.
    Using NVIDIA GPU Tensor Core GPUs, developers can use cuQuantum to speed up quantum circuit simulations
    based on state vector and tensor network methods by orders of magnitude. Two major components of the
    SDK are

      - cuStateVec: a high-performance library for state vector computations
      - cuTensorNet: a high-performance library for tensor network computations

    License Agreements:- The packages are governed by the NVIDIA cuQuantum
    Software License Agreement (EULA). By downloading and using the packages,
    you accept the terms and conditions of the NVIDIA cuQuantum EULA -
    https://docs.nvidia.com/cuda/cuquantum/license.html
  doc_url: https://docs.nvidia.com/cuda/cuquantum/index.html
  dev_url: https://developer.nvidia.com/cuquantum-downloads

extra:
  recipe-maintainers:
    - leofang
    - JeremyWangNVDA
    - mtjrider
