<<<<<<< HEAD
{% set package="cuquantum" %}
{% set sdk_version_string = "24.11.0.21" %}
{% set sdk_version = sdk_version_string.split(".") %}
{% set sdk_year  = sdk_version[0] | int %}
{% set sdk_month = sdk_version[1] | int %}
{% set sdk_patch = sdk_version[2] | int %}
{% set sdk_build = sdk_version[3] | int %}

{% set cuda_compiler_version = cuda_compiler_version | default("None") %}

{% if "." in (cuda_compiler_version | string) %}
  {% set cuda_version = cuda_compiler_version.split(".") %}
  {% set cuda_major = cuda_version[0] | int %}
  {% set cuda_minor = cuda_version[1] | int %}
=======
# Make sure the component versions are consistent with the SDK version!
{% set version = "24.08.0.5" %}
{% set cusv_version = "1.6.0" %}
{% set cutn_version = "2.5.0" %}

{% if cuda_compiler_version in (None, "None", True, False) %}
{% set cuda_major = 0 %}
{% else %}
{% set cuda_major = environ.get("cuda_compiler_version", "11.8").split(".")[0]|int %}
{% endif %}

# prioritize nompi variant via build number
{% set build_num = 5 %}
{% if mpi == 'nompi' %}
{% set cutn_build = build_num + 100 %}
>>>>>>> 33f1b84d1df2b5683c2b18f0c44bcefacf736e3e
{% else %}
  {% set cuda_major = cuda_compiler_version | int %}
  {% set cuda_minor = 0 %}
{% endif %}

{% if mpi != "nompi" %}
  {% set mpi_prefix = "mpi_" + mpi %}
  {% set mpi_suffix = sdk_build + 100 %}
{% else %}
  {% set mpi_prefix = "nompi_" %}
  {% set mpi_suffix = sdk_build %}
{% endif %}

{% if linux64 or aarch64 %}
  {% set kname = "linux" %}
  {% set march = "sbsa" %}    # [aarch64]
  {% set march = "x86_64" %}  # [linux64]

  {% set target_path = os.sep.join(["", "targets", "%s-%s" % (march, kname)]) %}
  {% set devzone_base = "https://developer.download.nvidia.com/compute" %}
  {% set devzone = "%s/%s/redist/%s/%s-%s" % (devzone_base, package, package, kname, march) %}
  
  {% set devzone = "%s/%s-%s-%s-%s_cuda%s-archive.tar.xz" % (devzone, package, kname, march, sdk_version_string, cuda_major) %}

  {% set github_base = "https://github.com/nvidia" %}
  {% set github = "%s/%s" % (github_base, package) %}
  {% set github = "%s/archive/refs/tags/v%s.tar.gz" % (github, ".".join(sdk_version[:3])) %}
{% endif %}

package:
<<<<<<< HEAD
  name: cuquantum-sdk
  version: {{ ".".join(sdk_version[:3]) }}

build:
  number: {{ sdk_build }}
  skip: true  # [not cuda_compiler_version in ("11.8", "12.0", "12.6")]
  skip: true  # [py<310]
  skip: true  # [win]
  skip: true  # [osx]

requirements:
  build:
    - {{ compiler("c") }}
    - {{ compiler("cxx") }}
    - {{ compiler("cuda") }}

source:
  - url: {{ devzone }}  # [cuda_compiler_version in ("11.8", "12.0", "12.6") and (linux64 or aarch64)]
    sha256: a36123e52daeae5e6e5c543b12d45fb41411280ceb924bbde54d4d1051cf10ef  # [cuda_compiler_version == "11.8" and linux64]
    sha256: 4640da62e66f17671c8d89be93a439b8a7a13169f7aa902a3e9b6cf676d4bffd  # [cuda_compiler_version in ("12.0", "12.6") and linux64]
    sha256: 16c1aba50c657456928386a8597d4b766daa3c6f69da738a9568ad4ac97094ae  # [cuda_compiler_version == "11.8" and aarch64]
    sha256: e3e4a289887d17d4b78eaac97f2fa03b2de9d832f918eb48ab97de997c104ce6  # [cuda_compiler_version in ("12.0", "12.6") and aarch64]

  - url: {{ github }}  # [linux64 or aarch64]
    sha256: a4b0965e7193515930542cc558d922e24c1732d8240efde3e622e84d6c4416fe  # [linux64 or aarch64]
=======
  name: cuquantum-sdk  # dummy
  version: {{ version }}

source:
  - url: https://developer.download.nvidia.com/compute/cuquantum/redist/cuquantum/linux-x86_64/cuquantum-linux-x86_64-{{ version }}_cuda{{ cuda_major }}-archive.tar.xz  # [linux64]
    sha256: f361f2e45ff863e7eb152f1553580c3bcfb7c0a6b9efea909688fdc519fee4d1  # [linux64 and (cuda_compiler_version or "").startswith("11")]
    sha256: 485968734706eeffcd3adc3b2d2086e59be7ff3ddd907e96f1eb97335beb344a  # [linux64 and (cuda_compiler_version or "").startswith("12")]

  - url: https://developer.download.nvidia.com/compute/cuquantum/redist/cuquantum/linux-ppc64le/cuquantum-linux-ppc64le-{{ version }}_cuda{{ cuda_major }}-archive.tar.xz  # [ppc64le]
    sha256: 8767174f86211ca3610d91bdf8c6b8145408836a3d14808414297aef3631fd43  # [ppc64le and (cuda_compiler_version or "").startswith("11")]
    sha256: 06d63f5c3a7a3f3e910259c1bfca3e7fdab72d0378099002941bc0a743f35694  # [ppc64le and (cuda_compiler_version or "").startswith("12")]

  - url: https://developer.download.nvidia.com/compute/cuquantum/redist/cuquantum/linux-sbsa/cuquantum-linux-sbsa-{{ version }}_cuda{{ cuda_major }}-archive.tar.xz  # [aarch64]
    sha256: 4b695e25f8e2bfdaa04f68c379fe2001b6fdb8fe63169780b584f7b49acd0312  # [aarch64 and (cuda_compiler_version or "").startswith("11")]
    sha256: 9ca173c8b58ac5c097a8c69f4900bc9ef0179def721804f1e9f033677445cafc  # [aarch64 and (cuda_compiler_version or "").startswith("12")]

  - url: https://github.com/NVIDIA/cuQuantum/archive/refs/tags/v{{ ".".join(version.split(".")[:3]) }}.tar.gz
    sha256: 6e4a5ad168e8aaa422f338c2a273242d3c9aa22be081a4065f85d75b6eecda7a

build:
  number: {{ build_num }}
  skip: true  # [not linux or cuda_compiler_version not in ("11.8", "12.0")]
>>>>>>> 33f1b84d1df2b5683c2b18f0c44bcefacf736e3e

outputs:
  - name: cuquantum
    version: {{ ".".join(sdk_version[:3]) }}
    build:
<<<<<<< HEAD
      number: {{ sdk_build }}
=======
      number: {{ build_num }}
>>>>>>> 33f1b84d1df2b5683c2b18f0c44bcefacf736e3e
    requirements:
      build:
      host:
      run:
        - {{ pin_subpackage("cudensitymat", max_pin="x.x.x") }}
        - {{ pin_subpackage("cutensornet", max_pin="x.x.x") }}
        - {{ pin_subpackage("custatevec", max_pin="x.x.x") }}
    test:
      commands:
        - echo "cuquantum metapackage {{ sdk_version_string }}"
  - name: cudensitymat
    version: 0.0.5
    build:
<<<<<<< HEAD
      number: {{ sdk_build }}
      string: "{{ mpi_prefix }}_h{{ PKG_HASH }}_{{ mpi_suffix }}"
      script:
        - "${RECIPE_DIR}/cudensitymat/cudm-install"
      run_exports:
        - {{ pin_subpackage("cudensitymat", max_pin="x") }} {{ mpi_prefix }}_*
      ignore_run_exports:
        - {{ compiler("cuda") }}
      post-link: post-link
    requirements:
      build:
        - {{ compiler("c") }}
        - {{ compiler("cxx") }}
        - {{ compiler("cuda") }}
      host:
        - cutensor >=2.0.2,<3
        - cuda-version {{ cuda_compiler_version }}  # [cuda_compiler_version in ("11.8", "12.0", "12.6")]
        - libcublas  # [cuda_compiler_version in ("12.0", "12.6")]
        - {{ mpi }}  # [mpi != "nompi"]
      run:
        - {{ pin_compatible("cutensor", max_pin="x") }}
        - cuda-version >={{ cuda_major }}.0,<{{ cuda_major + 1 }}  # [cuda_compiler_version in ("11.8", "12.0", "12.6")]
        - {{ pin_compatible("libcublas", max_pin="x", min_pin="x") }}  # [cuda_compiler_version in ("12.0", "12.6")]
        - {{ mpi }} * external*  # [mpi == "mpich"]
        - {{ mpi }}  # [mpi == "openmpi"]
=======
      number: {{ build_num }}
      script:
        - mkdir -p $PREFIX/include                                            # [linux]
        - mv include/custatevec.h $PREFIX/include/                            # [linux]
        - mkdir -p $PREFIX/lib                                                # [linux]
        - mv lib/libcustatevec.so* $PREFIX/lib/                               # [linux]
      run_exports:
        - {{ pin_subpackage('custatevec', max_pin='x') }}
      ignore_run_exports_from:
        - {{ compiler('cuda') }}
      missing_dso_whitelist:
        - '*/libcublas.so*'    # [(cuda_compiler_version or "").startswith("11")]
        - '*/libcublasLt.so*'  # [(cuda_compiler_version or "").startswith("11")]
      post-link: post-link  # this is supported by conda-build, but undocumented
    requirements:
      build:
        - {{ stdlib('c') }}
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('cuda') }}
      host:
        - libcublas  # [(cuda_compiler_version or "").startswith("12")]
        - cuda-version {{ cuda_compiler_version }}
      run:
        - cudatoolkit                                     # [(cuda_compiler_version or "").startswith("11")]
        - {{ pin_compatible('libcublas', max_pin='x') }}  # [(cuda_compiler_version or "").startswith("12")]
        - cuda-version >={{ cuda_major }}.0,<{{ cuda_major+1 }}
      # this should be set once conda-forge supports newer glibc
      # https://github.com/conda-forge/conda-forge.github.io/issues/1941
      # run_constrained:
      #   - __glibc >=2.27  # [aarch64 or ppc64le]
    # apparently conda-build supports full test section spec, the document is super outdated
    test:
      requires:
        - git
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('cuda') }}
        # make sure we pick up the version matching the docker,
        # or the linker would complain
        - cuda-version {{ cuda_compiler_version }}.*
      files:
        - test_load_elf.c
        - cusv_run_test.sh
      commands:
        - ./cusv_run_test.sh {{ version }}
    about:
      home: https://developer.nvidia.com/cuquantum-sdk
      license: LicenseRef-cuQuantum-Software-License-Agreement
      license_url: https://docs.nvidia.com/cuda/cuquantum/latest/license.html
      license_file: LICENSE
      summary: 'cuStateVec: A High-Performance Library for State Vector Quantum Simulators'
      description: |
        NVIDIA cuStateVec is a high-performance GPU library dedicated to operations with state vectors
        for expressing quantum algorithms. cuStateVec is a component of the NVIDIA cuQuantum SDK.

        The packages cuquantum, custatevec, and cutensornet are governed by the NVIDIA cuQuantum
        Software License Agreement (EULA). By downloading and using the packages,
        you accept the terms and conditions of the NVIDIA cuQuantum EULA -
        https://docs.nvidia.com/cuda/cuquantum/license.html
      doc_url: https://docs.nvidia.com/cuda/cuquantum/latest/custatevec/
      dev_url: https://github.com/NVIDIA/cuQuantum

  - name: cutensornet
    version: {{ cutn_version }}
    build:
      number: {{ cutn_build }}
      string: "{{ mpi_prefix }}_h{{ PKG_HASH }}_{{ cutn_build }}"
      script:
        - mkdir -p $PREFIX/include                                            # [linux]
        - mv include/cutensornet* $PREFIX/include/                            # [linux]
        - mkdir -p $PREFIX/lib                                                # [linux]
        - mv lib/libcutensornet.so* $PREFIX/lib/                              # [linux]

        # build the wrapper lib
        - $GCC -shared -std=c11 -fPIC -I$CUDA_PATH/include -I$PREFIX/include distributed_interfaces/cutensornet_distributed_interface_mpi.c -L$PREFIX/lib -lmpi -o $PREFIX/lib/libcutensornet_distributed_interface_mpi.so  # [mpi != 'nompi' and (cuda_compiler_version or "").startswith("11")]
        - $GCC -shared -std=c11 -fPIC $CFLAGS -I$PREFIX/include distributed_interfaces/cutensornet_distributed_interface_mpi.c -L$PREFIX/lib -lmpi -o $PREFIX/lib/libcutensornet_distributed_interface_mpi.so               # [mpi != 'nompi' and (cuda_compiler_version or "").startswith("12")]
        # copy activate/deactivate scripts
        - mkdir -p "${PREFIX}/etc/conda/activate.d"  # [mpi != 'nompi']
        - cp "${RECIPE_DIR}/cutn-activate.sh" "${PREFIX}/etc/conda/activate.d/cutn-activate.sh"  # [mpi != 'nompi']
        - mkdir -p "${PREFIX}/etc/conda/deactivate.d"  # [mpi != 'nompi']
        - cp "${RECIPE_DIR}/cutn-deactivate.sh" "${PREFIX}/etc/conda/deactivate.d/cutn-deactivate.sh"  # [mpi != 'nompi']
      run_exports:
        - {{ pin_subpackage('cutensornet', max_pin='x') }} {{ mpi_prefix }}_*
      ignore_run_exports_from:
        - {{ compiler('cuda') }}
      missing_dso_whitelist:
        - '*/libcutensor.so*'  # [(cuda_compiler_version or "").startswith("11")]
        - '*/libcublas.so*'    # [(cuda_compiler_version or "").startswith("11")]
        - '*/libcublasLt.so*'  # [(cuda_compiler_version or "").startswith("11")]
        - '*/libcusolver.so*'  # [(cuda_compiler_version or "").startswith("11")]
      post-link: post-link  # this is supported by conda-build, but undocumented
    requirements:
      build:
        - {{ stdlib('c') }}
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('cuda') }}
      host:
        - {{ mpi }}  # [mpi != 'nompi']
        - cutensor >=2.0.1,<3
        - libcublas        # [(cuda_compiler_version or "").startswith("12")]
        - libcusolver      # [(cuda_compiler_version or "").startswith("12")]
        - cuda-version {{ cuda_compiler_version }}
      run:
        - {{ pin_compatible('cutensor', max_pin='x') }}
        - {{ pin_compatible('libcublas', max_pin='x') }}    # [(cuda_compiler_version or "").startswith("12")]
        - {{ pin_compatible('libcusolver', max_pin='x') }}  # [(cuda_compiler_version or "").startswith("12")]
        - cuda-version >={{ cuda_major }}.0,<{{ cuda_major+1 }}
        # conda-forge mpich does not support CUDA...
        - {{ mpi }} * external*  # [mpi == 'mpich']
        - {{ mpi }}              # [mpi == 'openmpi']
>>>>>>> 33f1b84d1df2b5683c2b18f0c44bcefacf736e3e
      run_constrained:
        - openmpi <0.a0  # [mpi == "nompi"]
        - mpich   <0.a0  # [mpi == "nompi"]
    test:
      requires:
        - git
<<<<<<< HEAD
        - {{ compiler("c") }}
        - {{ compiler("cxx") }}
        - {{ compiler("cuda") }}
=======
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('cuda') }}
        # make sure we pick up the version matching the docker,
        # or the linker would complain
>>>>>>> 33f1b84d1df2b5683c2b18f0c44bcefacf736e3e
        - cuda-version {{ cuda_compiler_version }}.*
      files:
        - ./common/*
        - ./cudensitymat/*
      commands:
        - ./common/detect-glibc
        - ./common/validate-glibc
        - ./cudensitymat/cudm-tests {{ sdk_version_string }}
    about:
<<<<<<< HEAD
      home:
      license:
      license_url:
      license_file:
      summary:
      description:
      doc_url:
      dev_url:
  - name: cutensornet
    version: 2.6.0
    build:
      number: {{ sdk_build }}
      string: "{{ mpi_prefix }}_h{{ PKG_HASH }}_{{ mpi_suffix }}"
      script:
        - "${RECIPE_DIR}/cutensornet/cutn-install"
      run_exports:
        - {{ pin_subpackage("cutensornet", max_pin="x") }} {{ mpi_prefix }}_*
      ignore_run_exports:
        - {{ compiler("cuda") }}
      post-link: post-link
    requirements:
      build:
        - {{ compiler("c") }}
        - {{ compiler("cxx") }}
        - {{ compiler("cuda") }}
      host:
        - cutensor >=2.0.2,<3
        - cuda-version {{ cuda_compiler_version }}  # [cuda_compiler_version in ("11.8", "12.0", "12.6")]
        - libcusolver  # [cuda_compiler_version in ("12.0", "12.6")]
        - libcublas    # [cuda_compiler_version in ("12.0", "12.6")]
        - {{ mpi }}  # [mpi != "nompi"]
      run:
        - {{ pin_compatible("cutensor", max_pin="x") }}
        - cuda-version >={{ cuda_major }}.0,<{{ cuda_major + 1 }}        # [cuda_compiler_version in ("11.8", "12.0", "12.6")]
        - {{ pin_compatible("libcublas", max_pin="x", min_pin="x") }}    # [cuda_compiler_version in ("12.0", "12.6")]
        - {{ pin_compatible("libcusolver", max_pin="x", min_pin="x") }}  # [cuda_compiler_version in ("12.0", "12.6")]
        - {{ mpi }} * external*  # [mpi == "mpich"]
        - {{ mpi }}              # [mpi == "openmpi"]
      run_constrained:
        - openmpi <0.a0  # [mpi == "nompi"]
        - mpich   <0.a0  # [mpi == "nompi"]
    test:
      requires:
        - git
        - {{ compiler("c") }}
        - {{ compiler("cxx") }}
        - {{ compiler("cuda") }}
        - cuda-version {{ cuda_compiler_version }}.*
      files:
        - ./common/*
        - ./cutensornet/*
      commands:
        - ./common/detect-glibc
        - ./common/validate-glibc
        - ./cutensornet/cutn-tests {{ sdk_version_string }}
    about:
      home:
      license:
      license_url:
      license_file:
      summary:
      description:
      doc_url:
      dev_url:
  - name: custatevec
    version: 1.7.0
    build:
      number: {{ sdk_build }}
      string: "{{ mpi_prefix }}_h{{ PKG_HASH }}_{{ mpi_suffix }}"
      script:
        - "${RECIPE_DIR}/custatevec/cusv-install"
      run_exports:
        - {{ pin_subpackage("custatevec", max_pin="x") }} {{ mpi_prefix }}_*
      ignore_run_exports:
        - {{ compiler("cuda") }}
      post-link: post-link
    requirements:
      build:
        - {{ compiler("c") }}
        - {{ compiler("cxx") }}
        - {{ compiler("cuda") }}
      host:
        - cuda-version {{ cuda_compiler_version }}  # [cuda_compiler_version in ("11.8", "12.0", "12.6")]
        - libcublas                                 # [cuda_compiler_version in ("12.0", "12.6")]
      run:
        - cuda-version >={{ cuda_major }}.0,<{{ cuda_major + 1 }}      # [cuda_compiler_version in ("11.8", "12.0", "12.6")]
        - {{ pin_compatible("libcublas", max_pin="x", min_pin="x") }}  # [cuda_compiler_version in ("12.0", "12.6")]
        - cudatoolkit  # [cuda_compiler_version == "11.8"]
      run_constrained:
        - openmpi <0.a0  # [mpi == "nompi"]
        - mpich   <0.a0  # [mpi == "nompi"]
    test:
      requires:
        - git
        - {{ compiler("c") }}
        - {{ compiler("cxx") }}
        - {{ compiler("cuda") }}
        - cuda-version {{ cuda_compiler_version }}.*
      files:
        - ./common/*
        - ./custatevec/*
      commands:
        - ./common/detect-glibc
        - ./common/validate-glibc
        - ./custatevec/cusv-tests {{ sdk_version_string }}
    about:
      home:
      license:
      license_url:
      license_file:
      summary:
      description:
      doc_url:
      dev_url:
  - name: cuquantum-python
    version: {{ ".".join(sdk_version[:3]) }}
    build:
      number: {{ sdk_build }}
      script:
        - "${RECIPE_DIR}/cuquantum-python/cuquantum-python-install"
=======
      home: https://developer.nvidia.com/cuquantum-sdk
      license: LicenseRef-cuQuantum-Software-License-Agreement
      license_url: https://docs.nvidia.com/cuda/cuquantum/latest/license.html
      license_file: LICENSE
      summary: 'cuTensorNet: A High-Performance Library for Tensor Network Computations'
      description: |
        NVIDIA cuTensorNet is a high-performance GPU library for tensor network computations,
        a component of the NVIDIA cuQuantum SDK.

        The packages cuquantum, custatevec, and cutensornet are governed by the NVIDIA cuQuantum
        Software License Agreement (EULA). By downloading and using the packages,
        you accept the terms and conditions of the NVIDIA cuQuantum EULA -
        https://docs.nvidia.com/cuda/cuquantum/license.html
      doc_url: https://docs.nvidia.com/cuda/cuquantum/latest/cutensornet/
      dev_url: https://github.com/NVIDIA/cuQuantum

  - name: cuquantum-python
    version: {{ ".".join(version.split(".")[:3]) }}
    build:
      number: {{ build_num }}
      # build cuQuantum Python in a CUDA agnostic way to serve both CUDA 11/12
      # (note: this would still use cuda_compiler_version to calculate hash)
      skip: true  # [not (cuda_compiler_version or "").startswith("11") or (py < 39)]
      script_env:
        - CUQUANTUM_ROOT=$PREFIX
        - CUTENSOR_ROOT=$PREFIX
      script:
        # The CUDA 11 docker image sets CUDA_PATH for us
        - export CUDA_PATH=$BUILD_PREFIX/targets/x86_64-linux/   # [linux64 and (cuda_compiler_version or "").startswith("12")]
        - export CUDA_PATH=$BUILD_PREFIX/targets/sbsa-linux/     # [aarch64 and (cuda_compiler_version or "").startswith("12")]
        - export CUDA_PATH=$BUILD_PREFIX/targets/ppc64le-linux/  # [ppc64le and (cuda_compiler_version or "").startswith("12")]
        - cd python
        # {{ PYTHON }} is not resolved properly in multi-output recipes...
        - $PREFIX/bin/python -m pip install --no-deps --no-build-isolation -vv .
>>>>>>> 33f1b84d1df2b5683c2b18f0c44bcefacf736e3e
      ignore_run_exports_from:
        - {{ compiler('cuda') }}
    requirements:
      build:
        - {{ stdlib('c') }}
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('cuda') }}
        - cross-python_{{ target_platform }}  # [build_platform != target_platform]
        - python >=3.10                       # [build_platform != target_platform]
        - cython <3                           # [build_platform != target_platform]
      host:
        - python >=3.10
        - pip
        - cython <3
<<<<<<< HEAD
        - custatevec  =1.7.0
        - cutensornet =2.6.0
        - cudensitymat =0.0.5
=======
        - custatevec  ={{ cusv_version }}
        - cutensornet ={{ cutn_version }}
>>>>>>> 33f1b84d1df2b5683c2b18f0c44bcefacf736e3e
        - packaging
      run:
        - python >=3.10
        - numpy  >=1.21,<2
        - cupy   >=13.0
        - {{ pin_subpackage('custatevec', max_pin='x') }}
        - {{ pin_subpackage('cutensornet', max_pin='x') }}
<<<<<<< HEAD
        - {{ pin_subpackage('cudensitymat', max_pin='x') }}
        - cuda-version >={{ cuda_major }}.0,<{{ cuda_major + 1 }}
=======
        - cuda-version >=11.0.*,<13.a0  # again, cuQuantum Python is "CUDA agnostic"
>>>>>>> 33f1b84d1df2b5683c2b18f0c44bcefacf736e3e
      run_constrained:
        - pytorch >=1.10
        - mpi4py >=3.1.0
    test:
      requires:
<<<<<<< HEAD
        - cuda-driver-dev  # [linux and cuda_compiler_version in ("12.0", "12.6")]
      files:
        - ./common/*
        - ./cuquantum-python/*
      commands:
        - ./cuquantum-python/cuquantum-python-tests
    about:
      home:
      license:
      license_url:
      license_file:
      summary:
      description:
      doc_url:
      dev_url:
=======
        - cuda-driver-dev  # [linux and (cuda_compiler_version or "").startswith("12")]
      commands:
        # perform the import test via CLI because we need to load the stub for CUDA 12
        - export CUDA_STUB="$PREFIX/lib/stubs/libcuda.so"  # [(cuda_compiler_version or "").startswith("12")]
        - LD_PRELOAD="$CUDA_STUB" python -c "import cuquantum"
        - LD_PRELOAD="$CUDA_STUB" python -c "import cuquantum.custatevec"
        - LD_PRELOAD="$CUDA_STUB" python -c "import cuquantum.cutensornet"
        - LD_PRELOAD="$CUDA_STUB" python -m cuquantum --includes --libs --target custatevec --target cutensornet
    about:
      home: https://developer.nvidia.com/cuquantum-sdk
      license: BSD-3-Clause
      license_url: https://docs.nvidia.com/cuda/cuquantum/latest/license.html#nvidia-cuquantum-python
      license_file: LICENSE
      summary: "cuQuantum Python: Python APIs for NVIDIA cuQuantum SDK"
      description: |
        NVIDIA cuQuantum Python provides Python bindings and high-level object-oriented
        models for accessing the full functionalities of NVIDIA cuQuantum SDK from Python.
      doc_url: https://docs.nvidia.com/cuda/cuquantum/latest/python/
      dev_url: https://github.com/NVIDIA/cuQuantum
>>>>>>> 33f1b84d1df2b5683c2b18f0c44bcefacf736e3e

about:
  home: https://developer.nvidia.com/cuquantum-sdk
  license: LicenseRef-cuQuantum-Software-License-Agreement
  license_url: https://docs.nvidia.com/cuda/cuquantum/latest/license.html
  license_file: LICENSE
<<<<<<< HEAD
  summary: "cuQuantum SDK: A High-Performance Library for Accelerating Quantum Information Science"
=======
  summary: 'cuQuantum SDK: A High-Performance Library for Accelerating Quantum Information Science'
>>>>>>> 33f1b84d1df2b5683c2b18f0c44bcefacf736e3e
  description: |
    NVIDIA cuQuantum is an SDK of optimized libraries and tools for accelerating quantum computing workflows.
    Using NVIDIA GPU Tensor Core GPUs, developers can use cuQuantum to speed up quantum circuit simulations
    based on state vector and tensor network methods by orders of magnitude. Two major components of the
    SDK are

      - cuDensityMat: a high-performance library for density matrix computations
      - cuStateVec: a high-performance library for state vector computations
      - cuTensorNet: a high-performance library for tensor network computations

    The packages cuquantum, custatevec, and cutensornet are governed by the NVIDIA cuQuantum
    Software License Agreement (EULA). By downloading and using the packages,
    you accept the terms and conditions of the NVIDIA cuQuantum EULA -
    https://docs.nvidia.com/cuda/cuquantum/license.html
  doc_url: https://docs.nvidia.com/cuda/cuquantum/latest/index.html
  dev_url: https://github.com/NVIDIA/cuQuantum

extra:
  recipe-maintainers:
    - leofang
    - JeremyWangNVDA
    - mtjrider
    - yangcal
    - DmitryLyakh
